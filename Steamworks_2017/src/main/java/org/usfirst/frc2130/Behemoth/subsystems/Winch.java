// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2130.Behemoth.subsystems;

import org.usfirst.frc2130.Behemoth.Robot;
import org.usfirst.frc2130.Behemoth.RobotMap;
import org.usfirst.frc2130.Behemoth.commands.*;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.DoubleSolenoid.Value;
import edu.wpi.first.wpilibj.command.Subsystem;


/**
 *
 */
public class Winch extends Subsystem {
	
	public int n; // Used to define and build our own true / false equation below.

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final DoubleSolenoid ptoSol = RobotMap.winchptoSol;
    private final DoubleSolenoid climbBarSol = RobotMap.winchClimbBarSol;

    // END AUTOGE0NERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS


    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
    
    // Winch
    
    	// Sets the value of n to 1 and engages the winch, but only if the left trigger is fully depressed first.
        // This is a safety switch to avoid accidental misfirings of our winch. 
    	public void engageWinch() {
    		//n = 1;
    		if (Robot.oi.driverJoy.getRawAxis(2) == 1) {
    			n = 1;
    			ptoSol.set(Value.kForward);
    		}
    	}
    	
    	// Should we decide we no longer want to climb, the driver can hit the back button. This sets the value of n to 0
    	// to prevent any use of the winch in the command. To understand more of how n is used, analyze the "runWinch" command.
    	public void disengageWinch() {
    		n = 0;
    		ptoSol.set(Value.kReverse);
    	}
    	
    // Winch Bar
    	
    	// Is run in tangent with engaging the winch within the PTO, this closes the teeth of our climbing mechanism around
    	// our rope.
    	public void engageWinchBar() {
    		if (Robot.oi.driverJoy.getRawAxis(2) == 1) {
    			climbBarSol.set(Value.kForward);
    		}
    	}
    	
    	
    	// Run in tangent with disengaging the winch, this would release the rope from the teeth of our climbing mechanism. 
    	public void disengageWinchBar() {
    		climbBarSol.set(Value.kReverse);
    	}
}

