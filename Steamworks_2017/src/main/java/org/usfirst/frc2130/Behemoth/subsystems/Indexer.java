// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2130.Behemoth.subsystems;

import org.usfirst.frc2130.Behemoth.Robot;
import org.usfirst.frc2130.Behemoth.RobotMap;
import org.usfirst.frc2130.Behemoth.commands.*;

import com.ctre.CANTalon;

import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.DoubleSolenoid.Value;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.TalonSRX;

import edu.wpi.first.wpilibj.command.Subsystem;


/**
 *
 */
public class Indexer extends Subsystem {
	
	public int a;

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final CANTalon indexerMaster = RobotMap.indexerIndexerMaster;
    private final CANTalon agitator = RobotMap.indexeragitator;
    private final DoubleSolenoid gateSol = RobotMap.indexergateSol;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS


    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
    
    // Indexer
    
    	// Under the current command, the indexer (the mechanism feeding the balls into our shooter) will simply run at full speed
        // whenever the motor is depressed. Should we remove the comments within this command, it would only run assuming the Talon PID
    	// was returning above a given RPM. 
		public void indexerFeed() {
			if (Robot.talonPIDSubsytem.motorRPM() < Robot.talonPIDSubsytem.adjustedSetpoint) {
				indexerMaster.set(-1);
				}
				else {
					indexerStop();
				}
		}

		// Stops the indexer motor.
		public void indexerStop() {
			indexerMaster.set(0);
		}
		
	// Agitator
		
		// To prevent the jamming of wiffle balls before they can reach the turret, there is an agitator within our robot. It is running
		// at a slower speed to limit voltage draw, and will always run when the indexer is running. Eventually, we may merge the two
		// commands for simplicity.
		public void agitatorFeed() {
			agitator.set(.75);
		}
		
		// Stops the agitator.
		public void agitatorStop() {
			agitator.set(0);
		}
	
	// Intake sol
		
		public void openIntakeSol() {
			gateSol.set(Value.kForward);
		}
		
		public void timedOpen() {
		/*	a = a + 1;
			if(a > 0 && a < 150) {
				intakeSol.set(Value.kForward);
			}
			if(a > 151 && a < 200) {
				intakeSol.set(Value.kReverse);
			}
			if(a > 201) {
				a = 0;
			} */
			
			gateSol.set(Value.kForward);
		}
		
		public void shutIntakeSol() {
			gateSol.set(Value.kReverse);
		}
		
		public void zeroOutA() {
			a = 0;
		}
		
		public int returnA() {
			return a;
		}
		
}

