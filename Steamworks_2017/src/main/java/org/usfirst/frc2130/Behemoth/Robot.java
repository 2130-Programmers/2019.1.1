// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2130.Behemoth;

import edu.wpi.cscore.UsbCamera;
import edu.wpi.first.wpilibj.CameraServer;
import edu.wpi.first.wpilibj.IterativeRobot; 
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.networktables.NetworkTable;


import org.usfirst.frc2130.Behemoth.commands.*;
import org.usfirst.frc2130.Behemoth.subsystems.*;

import com.ctre.CANTalon;
import com.ctre.CANTalon.FeedbackDevice;

import java.awt.Image;
import java.util.concurrent.atomic.AtomicInteger;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {

	// Builds a network table.
	//NetworkTable table;
	
	// The first step in building our smart dashboard autonomous buttons, gives us the ability to "choose" between them.
	SendableChooser chooser;
	
	int mode = 1;
	
    Command autonomousCommand;

    public static OI oi;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static DriveTrain driveTrain;
    public static Intake intake;
    public static Indexer indexer;
    public static Winch winch;
    public static TalonPIDSubsytem talonPIDSubsytem;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    public void robotInit() {
    	
    	//table = NetworkTable.getTable("dataTable");
    	
    	chooser = new SendableChooser();
    	// Add all of our autonomous commands here, in the style that the default autonomous command was added.
    	// The name we will see is in parentheses, the name of the command comes after the word "new."
    	chooser.addObject("Center Peg, Center Position", 1);
    	chooser.addObject("Red, Right Side, Right Position", 2);
    	chooser.addObject("Red, Left Side, Left Position", 3);
    	chooser.addObject("Blue, Left Side, Left Position", 4);
    	chooser.addObject("Blue, Right Side, Right Position", 5);
    	chooser.addObject("Dont click me", 6);
    	SmartDashboard.putData("Auto Modes", chooser);
    	
    	if(autonomousCommand != null) autonomousCommand.cancel();
    	
    RobotMap.init();
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveTrain = new DriveTrain();
        intake = new Intake();
        indexer = new Indexer();
        winch = new Winch();
        talonPIDSubsytem = new TalonPIDSubsytem();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // OI must be constructed after subsystems. If the OI creates Commands
        //(which it very likely will), subsystems are not guaranteed to be
        // constructed yet. Thus, their requires() statements may grab null
        // pointers. Bad news. Don't move it.
        oi = new OI();

        // instantiate the command used for the autonomous period
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

        autonomousCommand = new AutonomousCommand();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

    }

    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */
    public void disabledInit(){

    }

    public void disabledPeriodic() {
        Scheduler.getInstance().run();
    }

    public void autonomousInit() {
    	
    	Robot.driveTrain.shiftToHighGear();
    	
    	Robot.driveTrain.resetTheGyro();
    	Robot.driveTrain.resetTheEncoder();
        // Place the names of each command here again, with the autonomousCommand being = to the name of the command that we want to run.
    	// be sure to include a new case each time, and to break at after each command, as shown below.
    	mode = (int) chooser.getSelected();
    	switch(mode) {
    	case 1:
    		autonomousCommand = new AutoRoutine1();
    		break;
    	case 2:
    		autonomousCommand = new AutoRoutine2();
    		break;
    	case 3:
    		autonomousCommand = new AutoRoutine3();
    		break;
    	case 4:
    		autonomousCommand = new AutoRoutine4();
    		break;
    	case 5:
    		autonomousCommand = new AutoRoutine5();
    		break;
    	case 6:
    		autonomousCommand = new AutoRoutine6();
    		break;
    	}
    	
        // schedule the autonomous command (example)
        if (autonomousCommand != null) autonomousCommand.start();
    }

    /**
     * This function is called periodically during autonomous
     */
    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
    }

    public void teleopInit() {
    	
    	RobotMap.talonPIDSubsytemflyWheelMasterMotor.setPosition(0);
    	
    	Robot.driveTrain.resetTheEncoder();
    	Robot.driveTrain.resetTheGyro();
    	
    	UsbCamera camera = CameraServer.getInstance().startAutomaticCapture();
    	
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to
        // continue until interrupted by another command, remove
        // this line or comment it out.
        if (autonomousCommand != null) autonomousCommand.cancel();
    }

    /**
     * This function is called periodically during operator control
     */
    public void teleopPeriodic() {
    	// Drivetrain
    	SmartDashboard.putInt("Drivetrain Encoder Value", Robot.driveTrain.readTheEncoder());
    	SmartDashboard.putDouble("Gyro Value", Robot.driveTrain.readTheGyro());
    	// Flywheel
    	SmartDashboard.putDouble("Motor Output", Robot.talonPIDSubsytem.motorOutput());
    	SmartDashboard.putDouble("Motor RPM", Robot.talonPIDSubsytem.motorRPM());
    	SmartDashboard.putDouble("Talon Error", Robot.talonPIDSubsytem.error());
    	SmartDashboard.putDouble("Motor Position", Robot.talonPIDSubsytem.motorPosition());
    	// Winch
    	SmartDashboard.putInt("N Value", Robot.winch.n);
    	// Indexer
    	SmartDashboard.putInt("A value", Robot.indexer.returnA());
    	
        Scheduler.getInstance().run();
    }

    /**
     * This function is called periodically during test mode
     */
    public void testPeriodic() {
        LiveWindow.run();
    }
}
