// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2130.Behemoth.subsystems;

import org.usfirst.frc2130.Behemoth.Robot;
import org.usfirst.frc2130.Behemoth.RobotMap;
import org.usfirst.frc2130.Behemoth.commands.*;
import com.ctre.CANTalon;
import com.ctre.CANTalon.FeedbackDevice;
import com.ctre.CANTalon.TalonControlMode;

import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.command.Subsystem;

/**
 *
 */

public class TalonPIDSubsytem extends Subsystem {
	
	public int desiredSetpoint = -3220,
			   adjustedSetpoint = -3400;

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final CANTalon flyWheelMasterMotor = RobotMap.talonPIDSubsytemflyWheelMasterMotor;
    private final CANTalon flyWheelSlaveMotor = RobotMap.talonPIDSubsytemflyWheelSlaveMotor;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
    
    public void initTalons() {
    	
    	// Tells the talon to look at the feedback from the magnetic encoder that is wired to it.
    	flyWheelMasterMotor.setFeedbackDevice(FeedbackDevice.CtreMagEncoder_Relative);
    	// Only true if positive power to the motor shows negative feedback from the magnetic encoder.
    	flyWheelMasterMotor.reverseSensor(false);
    	
    	flyWheelMasterMotor.configNominalOutputVoltage(+0.0f, -0.0f);
    	// Under this case, the talon will apply full power to get to where it wants to go, and full reverse power
    	// to go in the other direction. These can be changed to set the maximum output of the motor in a simple way.
    	flyWheelMasterMotor.configPeakOutputVoltage(+12.0f, -12.0f);
    	
    	flyWheelMasterMotor.setProfile(0);
    	flyWheelMasterMotor.setF(0.17843);
    	flyWheelMasterMotor.setP(0.973);
    	flyWheelMasterMotor.setI(0);
    	flyWheelMasterMotor.setD(0.7);
    	
    }
    
    // The entire PID loop is calculated here, which is much simpler and reliable than the old method. As I mentioned in drive train,
    // there is a version of this called motion magic that will allow me to use honest motion profiling next year, with a full talon
    // drive train. 
    public void ShootingSetpoint() {
    	if (Robot.oi.aquireFiringRPMButtonCall() == true) {
    	
        // Our desired RPMs. 
    	// The actual data displayed on the graph is a bit higher than this number, we're shooting at around
    	// 3270 RPM at this time. 
    	double targetSpeed = -3000;
    	
    	// Sets the Talon to hold a given velocity when set, intsead of a power output of voltage.
    	flyWheelMasterMotor.changeControlMode(TalonControlMode.Speed);
    	flyWheelMasterMotor.set(targetSpeed);
    	}
    	else {
    		// If the trigger is not depressed, puts the talong back into voltage mode and sets its speed to zero.
    		// Basically a safety kill switch to insure it doesn't run when we don't want it to.
    		flyWheelMasterMotor.changeControlMode(TalonControlMode.PercentVbus);
    		flyWheelMasterMotor.set(0);
    	} 			
    } 
    
    // The following four commands are used during our debugging and tuning process. The names should adequately 
    // describe their purpose.
    public double motorOutput() {
    	return flyWheelMasterMotor.getOutputVoltage() / flyWheelMasterMotor.getBusVoltage();	
    }

    public double motorPosition() { 	
    	return flyWheelMasterMotor.getPosition(); 	
    }
    
    public double motorRPM() {	
    	return flyWheelMasterMotor.getSpeed();	
    }
    
    public double error() {	
    	return flyWheelMasterMotor.getSpeed() + 3200;	
    }
    
    // Stops the flywheel.
    public void stopTalons() {	
    	flyWheelMasterMotor.set(0);
    }
 
}

