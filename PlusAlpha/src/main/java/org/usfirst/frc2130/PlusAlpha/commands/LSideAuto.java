// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2130.PlusAlpha.commands;

import edu.wpi.first.wpilibj.command.CommandGroup;

import java.lang.invoke.SwitchPoint;

import org.usfirst.frc2130.PlusAlpha.Robot;
import org.usfirst.frc2130.PlusAlpha.subsystems.*;
import org.usfirst.frc2130.PlusAlpha.commands.SScaleMoveFour;
import org.usfirst.frc2130.PlusAlpha.commands.AutoIntake;
import org.usfirst.frc2130.PlusAlpha.commands.LSScaleTurnThree;
import org.usfirst.frc2130.PlusAlpha.commands.LSScaleTurnTwo;
import org.usfirst.frc2130.PlusAlpha.commands.SScaleMoveThree;
import org.usfirst.frc2130.PlusAlpha.commands.SScaleMoveTwo;

/**
 *
 */
public class LSideAuto extends CommandGroup {


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PARAMETERS
    public LSideAuto() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PARAMETERS
        // Add Commands here:
        // e.g. addSequential(new Command1());
        //      addSequential(new Command2());
        // these will run in order.

        // To run multiple commands at the same time,
        // use addParallel()
        // e.g. addParallel(new Command1());
        //      addSequential(new Command2());
        // Command1 and Command2 will run in parallel.

        // A command group will require all of the subsystems that each member
        // would require.
        // e.g. if Command1 requires chassis, and Command2 requires arm,
        // a CommandGroup containing them would require both the chassis and the
        // arm.
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=COMMAND_DECLARATIONS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=COMMAND_DECLARATIONS
    	switch (Robot.drivetrainSubsystem.getDataValueFromPosition(0)) {
    	case 0:
    		
    		addSequential(new TiltClawDown(), .2);
    		
    		addParallel(new DisengageBrake());
    		addParallel(new ClampCube());
    		addParallel(new ElevatorSwitchHeight());
    		addSequential(new SAutoMoveOne(), 2.45);
    		
    		addSequential(new EngageBrake(), .1);
    		
    		addSequential(new LSSwitchTurnOne(), 1.6);
    		
    		addSequential(new SNearSwitchMoveOne(), 1.6);
    		
    		addSequential(new AutoSlowShot(), .3);
    		break;
    	case 1:
    		switch (Robot.drivetrainSubsystem.getDataValueFromPosition(1)) {
	    		case 0:
	    			addParallel(new TiltClawDown());
	        		addSequential(new DisengageBrake(), .5);
	        		
	        		addParallel(new TiltClawUp());
	        		addParallel(new ClampCube());
	        		addSequential(new SScaleMoveOne(), 4.1);
	        	
	        		addSequential(new LSScaleTurnOne(), 1.1);
	        
	        		addSequential(new ElevatorMediumScaleHeight(), 2);
	        		
	        		addParallel(new ClampCube());
	        		addSequential(new FireCube(), 0.5);
	        		
	        		//2ND CUBE
	        		
	        		addSequential(new ElevatorIntakeHeight(), 1.3);
	        		
	        		addSequential(new LSScaleTurnTwo(), 1.75);
	        		
	        		addParallel(new TiltClawDown());
	        		addParallel(new AutoIntake());
	        		addSequential(new SScaleMoveThree(), 1.5);
	        		
	        		addParallel(new ClampCube());
	        		addSequential(new TiltClawUp(), 0.2);
	        		
	        		addSequential(new SScaleMoveFour(), 1.5);
	        		
	        		addSequential(new LSScaleTurnThree(), 1.75);
	        		
	        		addSequential(new ElevatorMediumScaleHeight(), 2);
	        		
	        		addSequential(new SScaleMoveTwo(), 0.5);
	        		
	        		addSequential(new FireCube(), 0.2);
	    			break;
	    		case 1:
	    			addParallel(new TiltClawDown());
	        		addSequential(new DisengageBrake(), .5);
	        		
	        		addParallel(new TiltClawUp());
	        		addParallel(new ClampCube());
	        		addSequential(new SFarScaleMoveOne(), 4.1);
	        		
	        		addSequential(new LSFarScaleTurnOne(), 2);
	        		
	        		addSequential(new SFarScaleMoveTwo(), 4);
	        		
	        		addSequential(new LSFarScaleTurnTwo(), 2.5);
	        		
	        		addSequential(new ElevatorMediumScaleHeight(), 2);
	        		
	        		addSequential(new SFarScaleMoveThree(), 2.5);
	        		
	        		addSequential(new FireCube(), 0.2);
	    			break;
    		}
    	}
    } 
}
