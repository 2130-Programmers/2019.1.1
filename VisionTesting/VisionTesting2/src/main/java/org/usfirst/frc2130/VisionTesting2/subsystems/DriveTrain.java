// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2130.VisionTesting2.subsystems;


import org.usfirst.frc2130.VisionTesting2.Robot;
import org.usfirst.frc2130.VisionTesting2.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.PIDOutput;
import edu.wpi.first.wpilibj.PIDSource;
import edu.wpi.first.wpilibj.SPI;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.networktables.NetworkTable;
import edu.wpi.first.networktables.NetworkTableEntry;
import edu.wpi.first.networktables.NetworkTableInstance;
import com.kauailabs.navx.frc.AHRS;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;
import com.ctre.phoenix.motorcontrol.can.WPI_VictorSPX;
import edu.wpi.first.wpilibj.SpeedControllerGroup;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class DriveTrain extends Subsystem {

    public double errorPrevious;
    public double LimeX;
    public double LimeY;
    public double LimeA;
    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
    private AHRS ahrs;
    private NetworkTable table;
    private NetworkTableEntry tx;
    private NetworkTableEntry ty;
    private NetworkTableEntry ta;


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private WPI_TalonSRX lRMotor;
    private WPI_VictorSPX lFMotor;
    private SpeedControllerGroup lMotors;
    private WPI_TalonSRX rRMotor;
    private WPI_VictorSPX rFMotor;
    private SpeedControllerGroup rMotors;
    private DifferentialDrive diffDrive;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS




    public DriveTrain() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        lRMotor = new WPI_TalonSRX(1);
        
        
        
        lFMotor = new WPI_VictorSPX(3);
        
        
        
        lMotors = new SpeedControllerGroup(lRMotor, lFMotor  );
        addChild("LMotors",lMotors);
        
        
        rRMotor = new WPI_TalonSRX(2);
        
        
        
        rFMotor = new WPI_VictorSPX(4);
        
        
        
        rMotors = new SpeedControllerGroup(rRMotor, rFMotor  );
        addChild("RMotors",rMotors);
        
        
        diffDrive = new DifferentialDrive(lMotors, rMotors);
        addChild("DiffDrive",diffDrive);
        diffDrive.setSafetyEnabled(true);
        diffDrive.setExpiration(0.1);
        diffDrive.setMaxOutput(1.0);

        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        table = NetworkTableInstance.getDefault().getTable("limelight");
        tx = table.getEntry("tx");
        ty = table.getEntry("ty");
        ta = table.getEntry("ta");

        try {
			/***********************************************************************
			 * navX-MXP:
			 * - Communication via RoboRIO MXP (SPI, I2C, TTL UART) and USB.
			 * - See http://navx-mxp.kauailabs.com/guidance/selecting-an-interface.
			 * 
			 * navX-Micro:
			 * - Communication via I2C (RoboRIO MXP or Onboard) and USB.
			 * - See http://navx-micro.kauailabs.com/guidance/selecting-an-interface.
			 * 
			 * Multiple navX-model devices on a single robot are supported.
			 ************************************************************************/
            ahrs = new AHRS(SPI.Port.kMXP);
            //ahrs = new AHRS(SerialPort.Port.kMXP, SerialDataType.kProcessedData, (byte)50);
            ahrs.enableLogging(true);
        } catch (RuntimeException ex ) {
            DriverStation.reportError("Error instantiating navX MXP:  " + ex.getMessage(), true);
        }
    }

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop

        LimeX = tx.getDouble(0.0);
        LimeY = ty.getDouble(0.0);
        LimeA = ta.getDouble(0.0);
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public double ahrsAngle() {
        return ahrs.getAngle();
    }

    public void zeroTheSensors() {
        ahrs.reset();
    }
    
    public double controller() {
    	double tolerance = 2; // The robot will try to get within 3 degrees of the desired angle
    	double kP = 0.017; // The proportional gain of our P loop
    	//double kI = 0.0001;
    	double kD = 0.0000197;
    	
    	double dIteration = 0.02;
    	
    	//double iOutput;
    	double dOutput;
    	double error = LimeX;//(target - ahrsAngle());
    	
    	//iGenerator += (error * 0.1);
    	//iOutput = iGenerator * kI;
    	
    	dOutput = (error - errorPrevious) / dIteration;
    	
    	errorPrevious = error;
    	
    	if (Math.abs(error) > tolerance) {
    		return (error * kP) + dOutput * kD; //+ iOutput;
    	} else {
    		return 0.0;
    	}
    }

    public void setWithSaturate(double limitedOutput) {
    	lRMotor.set(limitedOutput);
    	lFMotor.set(limitedOutput);
    	rRMotor.set(limitedOutput);
    	rFMotor.set(limitedOutput);
    }
    
    public void turnTo(double turnAngle) {
    	setWithSaturate(controller());
    }

    public void autoVisionTracking() {
        turnTo(LimeX);
    }

    public void configMotorPeakOutput(double maxSpeed) {
    	rFMotor.configPeakOutputForward(maxSpeed, 0);
    	rFMotor.configPeakOutputReverse(-maxSpeed, 0);
    	rRMotor.configPeakOutputForward(maxSpeed, 0);
    	rRMotor.configPeakOutputReverse(-maxSpeed, 0);
    	lFMotor.configPeakOutputForward(maxSpeed, 0);
    	lFMotor.configPeakOutputReverse(-maxSpeed, 0);
    	lRMotor.configPeakOutputForward(maxSpeed, 0);
    	lRMotor.configPeakOutputReverse(-maxSpeed, 0);
    }

    public void driveTrain() {
        diffDrive.arcadeDrive(Robot.oi.driverJoy.getRawAxis(1), Robot.oi.driverJoy.getRawAxis(4));
    }
}

