// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2130.PlusAlpha;

import org.usfirst.frc2130.PlusAlpha.commands.*; 

import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.JoystickButton;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public JoystickButton solOffButton;
    public JoystickButton dropCubeButton;
    public JoystickButton tiltClawUpButton;
    public JoystickButton tiltClawDownButton;
    public JoystickButton slowShotEngager;
    public Joystick driverJoystick;
    public JoystickButton scaleHeightButton;
    public JoystickButton switchHeightButton;
    public JoystickButton intakeHeight;
    public JoystickButton disengageBrakeButton;
    public JoystickButton engageBrakeButton;
    public JoystickButton mediumScaleButton;
    public JoystickButton ohCrapButton;
    public JoystickButton allGoodButton;
    public Joystick operatorJoystick;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        operatorJoystick = new Joystick(1);
        
        allGoodButton = new JoystickButton(operatorJoystick, 7);
        allGoodButton.whenPressed(new NVMAllGood());
        ohCrapButton = new JoystickButton(operatorJoystick, 8);
        ohCrapButton.whenPressed(new OhCrap());
        mediumScaleButton = new JoystickButton(operatorJoystick, 3);
        mediumScaleButton.whenPressed(new ElevatorMediumScaleHeight());
        engageBrakeButton = new JoystickButton(operatorJoystick, 6);
        engageBrakeButton.whenPressed(new EngageBrake());
        disengageBrakeButton = new JoystickButton(operatorJoystick, 5);
        disengageBrakeButton.whenPressed(new DisengageBrake());
        intakeHeight = new JoystickButton(operatorJoystick, 2);
        intakeHeight.whenPressed(new ElevatorIntakeHeight());
        switchHeightButton = new JoystickButton(operatorJoystick, 1);
        switchHeightButton.whenPressed(new ElevatorSwitchHeight());
        scaleHeightButton = new JoystickButton(operatorJoystick, 4);
        scaleHeightButton.whenPressed(new ElevatorScaleHeight());
        driverJoystick = new Joystick(0);
        
        slowShotEngager = new JoystickButton(driverJoystick, 5);
        slowShotEngager.whileHeld(new SlowCubeFire());
        tiltClawDownButton = new JoystickButton(driverJoystick, 10);
        tiltClawDownButton.whenPressed(new TiltClawDown());
        tiltClawUpButton = new JoystickButton(driverJoystick, 9);
        tiltClawUpButton.whenPressed(new TiltClawUp());
        dropCubeButton = new JoystickButton(driverJoystick, 1);
        dropCubeButton.whileHeld(new DropCube());
        solOffButton = new JoystickButton(driverJoystick, 8);
        solOffButton.whileHeld(new SolOff());


        // SmartDashboard Buttons
        SmartDashboard.putData("Autonomous Command", new AutonomousCommand());
        SmartDashboard.putData("JoystickDrivetrain", new JoystickDrivetrain());
        SmartDashboard.putData("ElevatorScaleHeight", new ElevatorScaleHeight());
        SmartDashboard.putData("ElevatorSwitchHeight", new ElevatorSwitchHeight());
        SmartDashboard.putData("ElevatorIntakeHeight", new ElevatorIntakeHeight());
        SmartDashboard.putData("ElevatorMediumScaleHeight", new ElevatorMediumScaleHeight());
        SmartDashboard.putData("JoystickElevatorController", new JoystickElevatorController());
        SmartDashboard.putData("IntakeProcedure", new IntakeProcedure());
        SmartDashboard.putData("SolOff", new SolOff());
        SmartDashboard.putData("FireCube", new FireCube());
        SmartDashboard.putData("SlowCubeFire", new SlowCubeFire());
        SmartDashboard.putData("DropCube", new DropCube());
        SmartDashboard.putData("TiltClawUp", new TiltClawUp());
        SmartDashboard.putData("TiltClawDown", new TiltClawDown());
        SmartDashboard.putData("EngageBrake", new EngageBrake());
        SmartDashboard.putData("DisengageBrake", new DisengageBrake());
        SmartDashboard.putData("NoAuto", new NoAuto());
        SmartDashboard.putData("CAuto", new CAuto());
        SmartDashboard.putData("RSideAuto", new RSideAuto());
        SmartDashboard.putData("SAutoMoveOne", new SAutoMoveOne());
        SmartDashboard.putData("LSideAuto", new LSideAuto());
        SmartDashboard.putData("LSScaleTurnOne", new LSScaleTurnOne());
        SmartDashboard.putData("LSSwitchTurnOne", new LSSwitchTurnOne());
        SmartDashboard.putData("LSSwitchTurnTwo", new LSSwitchTurnTwo());
        SmartDashboard.putData("RWallAuto", new RWallAuto());
        SmartDashboard.putData("LWallAuto", new LWallAuto());
        SmartDashboard.putData("LWTurnOne", new LWTurnOne());
        SmartDashboard.putData("AutoSlowShot", new AutoSlowShot());
        SmartDashboard.putData("LSScaleTurnTwo", new LSScaleTurnTwo());
        SmartDashboard.putData("LeftCenterAuto", new LeftCenterAuto());
        SmartDashboard.putData("WaitForCenterAutoData", new WaitForCenterAutoData());
        SmartDashboard.putData("RightCenterAuto", new RightCenterAuto());
        SmartDashboard.putData("WaitForRightAutoData", new WaitForRightAutoData());
        SmartDashboard.putData("RightNearScaleAuto", new RightNearScaleAuto());
        SmartDashboard.putData("RightFarScaleAuto", new RightFarScaleAuto());
        SmartDashboard.putData("WaitForLeftAutoData", new WaitForLeftAutoData());
        SmartDashboard.putData("LeftNearScaleAuto", new LeftNearScaleAuto());
        SmartDashboard.putData("LeftFarScaleAuto", new LeftFarScaleAuto());
        SmartDashboard.putData("CheckForData", new CheckForData());
        SmartDashboard.putData("CheckForDataLeft", new CheckForDataLeft());
        SmartDashboard.putData("CheckForDataRight", new CheckForDataRight());
        SmartDashboard.putData("SwitchCommand", new SwitchCommand());
        SmartDashboard.putData("LeftScaleCommand", new LeftScaleCommand());
        SmartDashboard.putData("RightScaleCommand", new RightScaleCommand());
        SmartDashboard.putData("LeftSwitchCommand", new LeftSwitchCommand());
        SmartDashboard.putData("RightSwitchCommand", new RightSwitchCommand());
        SmartDashboard.putData("WaitForLeftSwitchAutoData", new WaitForLeftSwitchAutoData());
        SmartDashboard.putData("WaitForRightSwitchAutoData", new WaitForRightSwitchAutoData());
        SmartDashboard.putData("GoForward", new GoForward());
        SmartDashboard.putData("GoToLeftSwitch", new GoToLeftSwitch());
        SmartDashboard.putData("GoToRightSwitch", new GoToRightSwitch());
        SmartDashboard.putData("DelayedAutoLineMch12", new DelayedAutoLineMch12());
        SmartDashboard.putData("SitStill", new SitStill());
        SmartDashboard.putData("CAutoMoveThree", new CAutoMoveThree());
        SmartDashboard.putData("CAutoMoveFour", new CAutoMoveFour());
        SmartDashboard.putData("CAutoRightTurnTwo", new CAutoRightTurnTwo());
        SmartDashboard.putData("CAutoMoveFive", new CAutoMoveFive());
        SmartDashboard.putData("CAutoRightTurnThree", new CAutoRightTurnThree());
        SmartDashboard.putData("CAutoLeftTurnTwo", new CAutoLeftTurnTwo());
        SmartDashboard.putData("CAutoLeftTurnThree", new CAutoLeftTurnThree());
        SmartDashboard.putData("CAutoMoveSix", new CAutoMoveSix());
        SmartDashboard.putData("OhCrap", new OhCrap());
        SmartDashboard.putData("NVMAllGood", new NVMAllGood());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getDriverJoystick() {
        return driverJoystick;
    }

    public Joystick getOperatorJoystick() {
        return operatorJoystick;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    
    public boolean isSolButtonOn() {
    	return solOffButton.get();
    }
    
    public boolean isDropCubeButtonOn() {
    	return dropCubeButton.get();
    }
    
    public boolean isSlowButtonOn() {
    	return slowShotEngager.get();
    }
}
