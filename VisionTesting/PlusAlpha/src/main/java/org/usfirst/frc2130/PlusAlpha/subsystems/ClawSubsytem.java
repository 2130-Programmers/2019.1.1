// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2130.PlusAlpha.subsystems;

import org.usfirst.frc2130.PlusAlpha.Robot;
import org.usfirst.frc2130.PlusAlpha.RobotMap;
import org.usfirst.frc2130.PlusAlpha.commands.*;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.DoubleSolenoid.Value;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.DoubleSolenoid;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class ClawSubsytem extends Subsystem {
	
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
	
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final DoubleSolenoid clawTiltSol = RobotMap.clawSubsytemClawTiltSol;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new TiltClawUp());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        
        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
    
    @Override
    public void periodic() {
        // Put code here to be run every loop
    }
    
    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    
    /* This case function allows for easier programming of the robot's pnuematics. "Up" tilts the arms to about 20 degrees of their
     * maximum angle, which allows us to fire higher on the scale later in the game, or to move our arms out of the way of other
     * robots. "Down" puts the arms into our intake position */
    public void clawAngle(String angle) {
    	switch(angle) {
    	case("up"):
    		clawTiltSol.set(Value.kForward);
    	break;
    	case("down"):
    		clawTiltSol.set(Value.kReverse);
    	break;
    	}
    }
    
    /* This function will be run whenever we want to tilt the arms in a command. "true" will tilt them up, "false"
     * will tilt them down */
    public void tiltClawCommand(boolean tiltUp) {
    		if(tiltUp) {
    			clawAngle("up");
    		}
    		else {
    			clawAngle("down");
    		}
    }
    
    public void dropClaw() {
    	clawAngle("down");
    }
}
