// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc2130.PlusAlpha;

//import com.kauailabs.navx.frc.AHRS;
import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.SPI;

import com.ctre.phoenix.motorcontrol.ControlMode;
import com.ctre.phoenix.motorcontrol.FeedbackDevice;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;
import com.ctre.phoenix.motorcontrol.can.WPI_VictorSPX;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.SpeedControllerGroup;
import edu.wpi.first.wpilibj.VictorSP;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
	public static AHRS drivetrainSubsystemahrs;
	public static String elevatorGameData;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static WPI_TalonSRX drivetrainSubsystemLRMotor;
    public static WPI_VictorSPX drivetrainSubsystemLFMotor;
    public static SpeedControllerGroup drivetrainSubsystemleftSideMotors;
    public static WPI_TalonSRX drivetrainSubsystemRRMotor;
    public static WPI_VictorSPX drivetrainSubsystemRFMotor;
    public static SpeedControllerGroup drivetrainSubsystemrightSideMotors;
    public static DifferentialDrive drivetrainSubsystemdifferentialDrive;
    public static DoubleSolenoid drivetrainSubsystemshiftingSol;
    public static DigitalInput intakeSubsysteminfraredSensor;
    public static DoubleSolenoid intakeSubsystemintakeSol;
    public static SpeedController intakeSubsystemrightIntakeMotor;
    public static SpeedController intakeSubsystemleftIntakeMotor;
    public static DoubleSolenoid elevatorPIDSubsytemelevatorSolenoid;
    public static Encoder elevatorPIDSubsytemnullEncoder;
    public static WPI_TalonSRX elevatorPIDSubsytemelevatorMotor;
    public static WPI_TalonSRX elevatorPIDSubsytemelevatorSlaveMotor;
    public static DigitalInput elevatorPIDSubsytemtopProx;
    public static DigitalInput elevatorPIDSubsytembottomProx;
    public static DoubleSolenoid clawSubsytemClawTiltSol;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

        //drivetrainSubsystemahrs = new AHRS(SPI.Port.kMXP);
    	
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        drivetrainSubsystemLRMotor = new WPI_TalonSRX(1);
        
        
        drivetrainSubsystemLFMotor = new WPI_VictorSPX(3);
        
        
        drivetrainSubsystemleftSideMotors = new SpeedControllerGroup(drivetrainSubsystemLRMotor, drivetrainSubsystemLFMotor  );
        LiveWindow.addActuator("DrivetrainSubsystem", "leftSideMotors", drivetrainSubsystemleftSideMotors);
        
        drivetrainSubsystemRRMotor = new WPI_TalonSRX(2);
        
        
        drivetrainSubsystemRFMotor = new WPI_VictorSPX(4);
        
        
        drivetrainSubsystemrightSideMotors = new SpeedControllerGroup(drivetrainSubsystemRRMotor, drivetrainSubsystemRFMotor  );
        LiveWindow.addActuator("DrivetrainSubsystem", "rightSideMotors", drivetrainSubsystemrightSideMotors);
        
        drivetrainSubsystemdifferentialDrive = new DifferentialDrive(drivetrainSubsystemleftSideMotors, drivetrainSubsystemrightSideMotors);
        LiveWindow.addActuator("DrivetrainSubsystem", "differentialDrive", drivetrainSubsystemdifferentialDrive);
        drivetrainSubsystemdifferentialDrive.setSafetyEnabled(true);
        drivetrainSubsystemdifferentialDrive.setExpiration(0.1);
        drivetrainSubsystemdifferentialDrive.setMaxOutput(1.0);

        drivetrainSubsystemshiftingSol = new DoubleSolenoid(0, 2, 3);
        LiveWindow.addActuator("DrivetrainSubsystem", "shiftingSol", drivetrainSubsystemshiftingSol);
        
        intakeSubsysteminfraredSensor = new DigitalInput(0);
        LiveWindow.addSensor("IntakeSubsystem", "infraredSensor", intakeSubsysteminfraredSensor);
        
        intakeSubsystemintakeSol = new DoubleSolenoid(0, 0, 1);
        LiveWindow.addActuator("IntakeSubsystem", "intakeSol", intakeSubsystemintakeSol);
        
        intakeSubsystemrightIntakeMotor = new VictorSP(0);
        LiveWindow.addActuator("IntakeSubsystem", "rightIntakeMotor", (VictorSP) intakeSubsystemrightIntakeMotor);
        intakeSubsystemrightIntakeMotor.setInverted(false);
        intakeSubsystemleftIntakeMotor = new VictorSP(1);
        LiveWindow.addActuator("IntakeSubsystem", "leftIntakeMotor", (VictorSP) intakeSubsystemleftIntakeMotor);
        intakeSubsystemleftIntakeMotor.setInverted(true);
        elevatorPIDSubsytemelevatorSolenoid = new DoubleSolenoid(0, 4, 5);
        LiveWindow.addActuator("ElevatorPIDSubsytem", "elevatorSolenoid", elevatorPIDSubsytemelevatorSolenoid);
        
        elevatorPIDSubsytemnullEncoder = new Encoder(24, 25, false, EncodingType.k4X);
        LiveWindow.addSensor("ElevatorPIDSubsytem", "nullEncoder", elevatorPIDSubsytemnullEncoder);
        elevatorPIDSubsytemnullEncoder.setDistancePerPulse(1.0);
        elevatorPIDSubsytemnullEncoder.setPIDSourceType(PIDSourceType.kRate);
        elevatorPIDSubsytemelevatorMotor = new WPI_TalonSRX(5);
        
        
        elevatorPIDSubsytemelevatorSlaveMotor = new WPI_TalonSRX(6);
        
        
        elevatorPIDSubsytemtopProx = new DigitalInput(1);
        LiveWindow.addSensor("ElevatorPIDSubsytem", "topProx", elevatorPIDSubsytemtopProx);
        
        elevatorPIDSubsytembottomProx = new DigitalInput(2);
        LiveWindow.addSensor("ElevatorPIDSubsytem", "bottomProx", elevatorPIDSubsytembottomProx);
        
        clawSubsytemClawTiltSol = new DoubleSolenoid(0, 6, 7);
        LiveWindow.addActuator("ClawSubsytem", "ClawTiltSol", clawSubsytemClawTiltSol);
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        
        elevatorPIDSubsytemelevatorMotor.configSelectedFeedbackSensor(FeedbackDevice.CTRE_MagEncoder_Absolute, 0, 0);
        drivetrainSubsystemLRMotor.configSelectedFeedbackSensor(FeedbackDevice.CTRE_MagEncoder_Absolute, 0, 0);
        drivetrainSubsystemLRMotor.setInverted(true);
        drivetrainSubsystemLFMotor.setInverted(true);
        drivetrainSubsystemRFMotor.setInverted(true);
        drivetrainSubsystemRRMotor.setInverted(true);
        
        elevatorGameData = DriverStation.getInstance().getGameSpecificMessage();
        
        elevatorPIDSubsytemelevatorMotor.setInverted(true); // Bot A
        elevatorPIDSubsytemelevatorSlaveMotor.setInverted(true);
       
        //elevatorPIDSubsytemelevatorMotor.setInverted(false); // Bot B
        //elevatorPIDSubsytemelevatorSlaveMotor.setInverted(false);

        elevatorPIDSubsytemelevatorSlaveMotor.set(ControlMode.Follower, 5);
}
}
