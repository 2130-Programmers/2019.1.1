// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc0.DriveTrainCory.subsystems;


import org.usfirst.frc0.DriveTrainCory.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.PIDOutput;
import edu.wpi.first.wpilibj.PIDSource;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.Spark;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.SpeedControllerGroup;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class subsystemDiff extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private Spark speedContRF;
    private Spark speedContRR;
    private SpeedControllerGroup speedContgroupL;
    private Spark speedContLF;
    private Spark speedContLR;
    private SpeedControllerGroup speedContgroupR;
    private DifferentialDrive diffDriv;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public subsystemDiff() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        speedContRF = new Spark(0);
        addChild("speedContRF",speedContRF);
        speedContRF.setInverted(false);
        
        speedContRR = new Spark(1);
        addChild("speedContRR",speedContRR);
        speedContRR.setInverted(false);
        
        speedContgroupL = new SpeedControllerGroup(speedContRF, speedContRR  );
        addChild("speedContgroupL",speedContgroupL);
        
        
        speedContLF = new Spark(2);
        addChild("speedContLF",speedContLF);
        speedContLF.setInverted(false);
        
        speedContLR = new Spark(3);
        addChild("speedContLR",speedContLR);
        speedContLR.setInverted(false);
        
        speedContgroupR = new SpeedControllerGroup(speedContLF, speedContLR  );
        addChild("speedContgroupR",speedContgroupR);
        
        
        diffDriv = new DifferentialDrive(speedContgroupL, speedContgroupR);
        addChild("diffDriv",diffDriv);
        diffDriv.setSafetyEnabled(true);
        diffDriv.setExpiration(0.1);
        diffDriv.setMaxOutput(1.0);

        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop

    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

}

