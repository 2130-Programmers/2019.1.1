// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc2130.LibraMaster.subsystems;

import org.usfirst.frc2130.LibraMaster.Robot;
import org.usfirst.frc2130.LibraMaster.commands.*;
import edu.wpi.first.wpilibj.command.PIDSubsystem;
import edu.wpi.first.wpilibj.command.PIDSubsystem;
import edu.wpi.first.wpilibj.PIDSource;
import edu.wpi.first.wpilibj.PIDOutput;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.DoubleSolenoid.Value;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDSourceType;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class ElevatorPIDSubsystem extends PIDSubsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private WPI_TalonSRX elevatorMotor;
    private WPI_TalonSRX elevatorSlaveMotor;
    private Encoder nullEncoder;
    private DoubleSolenoid elevatorSolenoid;
    private DigitalInput topProx;
    private DigitalInput bottomProx;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public static final int kPIDLoopIdx = 0;
	double lastMeasurement = 0;

    // Initialize your subsystem here
    public ElevatorPIDSubsystem() {
        /*
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PID
        super("ElevatorPIDSubsystem", 2.5E-4, 0.0, 0.0);
        setAbsoluteTolerance(0.2);
        getPIDController().setContinuous(false);
        getPIDController().setName("ElevatorPIDSubsystem", "PIDSubsystem Controller");
        LiveWindow.add(getPIDController());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PID
        */
    	
    	/* I commented out the auto generated code above. Rather than having to remember to change robot builder every
    	 * time that we played with these values, it'll be easier to change them here. That said, don't change
    	 * robot builder PID values and expect to see a change here. */
    	super("ElevatorPIDSubsytem", 0.00013, 0.0, 0.0);
        setAbsoluteTolerance(200);
        getPIDController().setContinuous(false);
        LiveWindow.addActuator("ElevatorPIDSubsytem", "PIDSubsystem Controller", getPIDController());

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        elevatorMotor = new WPI_TalonSRX(0);
        
        
        
        elevatorSlaveMotor = new WPI_TalonSRX(1);
        
        
        
        nullEncoder = new Encoder(24, 25, false, EncodingType.k4X);
        addChild("nullEncoder",nullEncoder);
        nullEncoder.setDistancePerPulse(1.0);
        nullEncoder.setPIDSourceType(PIDSourceType.kRate);
        
        elevatorSolenoid = new DoubleSolenoid(0, 4, 5);
        addChild("elevatorSolenoid",elevatorSolenoid);
        
        
        topProx = new DigitalInput(1);
        addChild("topProx",topProx);
        
        
        bottomProx = new DigitalInput(2);
        addChild("bottomProx",bottomProx);
        
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS


        // Use these to get going:
        // setSetpoint() -  Sets where the PID controller should move the system
        //                  to
        // enable() - Enables the PID controller.
    }

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }

    @Override
    protected double returnPIDInput() {
        // Return your input value for the PID loop
        // e.g. a sensor, like a potentiometer:
        // yourPot.getAverageVoltage() / kYourMaxVoltage;
        
        /*
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SOURCE
        return nullEncoder.pidGet();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SOURCE
        */
    	double alpha = 0.0363295212;
    	
    	double output = alpha * elevatorHeight() + (1 - alpha) * lastMeasurement;
    	lastMeasurement = elevatorHeight();
    	
    	return output;
    }

    @Override
    protected void usePIDOutput(double output) {
        // Use output to drive your system, like a motor
        // e.g. yourMotor.set(output);

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=OUTPUT
        elevatorMotor.pidWrite(output);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=OUTPUT
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    public void brakeState(String state) {
    	switch(state) {
    	case("engaged"):
    		elevatorSolenoid.set(Value.kForward);
    	break;
    	case("disengaged"):
    		elevatorSolenoid.set(Value.kReverse);
    	break;
    	}
    }
    
    public void engageBrake() {
    	brakeState("engaged");
    }
    
    public void disengageBrake() {
    	brakeState("disengaged");
    }
    
    /* Sets the value of the talon encoder at its given position as its new 0 */
    public void zeroTheTalon() {
    	elevatorMotor.setSelectedSensorPosition(0, kPIDLoopIdx, 0);
    }
    
    /* Gives us the height of the elevator in ticks */
    public double elevatorHeight() {
    	 return 1 * elevatorMotor.getSelectedSensorPosition(0); // For bot 1
    	 //return -1 * elevatorMotor.getSelectedSensorPosition(0); // For bot 2
    }
    
    /* The following function is used in our code to check whether or not the prox is active. Setting the boolean value
     * to true will tell the computer we're looking for the top prox, and false will tell it the bottom */
    public boolean getProx(boolean useTopProx) {
    	if (useTopProx) {
    		return !topProx.get();
    	} else {
    		return !bottomProx.get();
    	}
    }
    
    /* This tells us the output of the Talon, and whether its in the forward or backward direction */
    public double motorOutput() {
    	return elevatorMotor.getMotorOutputPercent();
    }
    
    public void resetpeakoutput() {
    	elevatorMotor.configPeakOutputForward(1, 0);
    	elevatorMotor.configPeakOutputReverse(-1, 0);
    }
   
    /* The following function will run our elevator to several desired setpoints, activating a pnuematic
     * break when it reaches its destination */
    public void setSetpointWithBrake(int setpoint) {    
    	/* This code functions as a sort of dampener. When the elevator is below a certain point it slows down and
    	 * gently parks at the bottom prox */
    	if (elevatorHeight() < 4000) {
    		elevatorMotor.configPeakOutputForward(0.7, 0);
    		elevatorMotor.configPeakOutputReverse(-0.2, 0);
    	}
    	if (elevatorHeight() >= 4000) {
    		elevatorMotor.configPeakOutputForward(0.7, 0);
    		elevatorMotor.configPeakOutputReverse(-0.43, 0);
    	}
    	
    	if(motorOutput() > 0 && getProx(true) == true) {
    		disable();
    		elevatorMotor.set(0);
    	}
    	if(motorOutput() < 0 && getProx(false) == true) {
    		disable();
    		elevatorMotor.set(0);
    	}
    	
    	/* Currently this gives our loop a tolerance of 10 native encoder units. Once we are within this range,
    	 * the brake will engage and the loop will end, holding us position until a new setpoint is called*/
    	if(elevatorHeight() > setpoint - 500 && elevatorHeight() < setpoint + 500 && elevatorHeight() > 1000) {
    		disable();
    		brakeState("engaged");
    		stopAllMotors();
    	}
    	else {
    		enable();
    		brakeState("disengaged");
    		setSetpoint(setpoint);
    	}
    	
    	if(elevatorHeight() < setpoint && elevatorHeight() <= 1000 && motorOutput() < 0) {
    		disable();
    		stopAllMotors();
    	}
    }
    
    /* This zeroes out our elevator each time it hits the bottom prox, which will keep its setpoints accurate
     * over the course of a while match */
    public void homeEncoder() {
    	if (getProx(false) == true) {
    	    zeroTheTalon();
    	}
    }
    
    public void elevatorManualControl() {
    	resetpeakoutput();
    	elevatorMotor.set(Robot.oi.operatorJoystick.getRawAxis(1));
    }
    
    /* This stops all of the motors */
    public void stopAllMotors() {
    	elevatorMotor.stopMotor();
    }

}
