// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2130.driveTrainMet.subsystems;


import org.usfirst.frc2130.driveTrainMet.Robot;
import org.usfirst.frc2130.driveTrainMet.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.PIDOutput;
import edu.wpi.first.wpilibj.PIDSource;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.SpeedControllerGroup;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class driveTrain extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    public static final int kPIDLoopIdx = 0;

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private WPI_TalonSRX motorRF;
    private WPI_TalonSRX motorRR;
    private SpeedControllerGroup contGroupR;
    private WPI_TalonSRX motorLF;
    private WPI_TalonSRX motorLR;
    private SpeedControllerGroup contGroupL;
    private DifferentialDrive diffDrive;
    private DigitalInput limitSwitch;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public driveTrain() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        motorRF = new WPI_TalonSRX(3);
        
        
        
        motorRR = new WPI_TalonSRX(4);
        
        
        
        contGroupR = new SpeedControllerGroup(motorRF, motorRR  );
        addChild("contGroupR",contGroupR);
        
        
        motorLF = new WPI_TalonSRX(1);
        
        
        
        motorLR = new WPI_TalonSRX(2);
        
        
        
        contGroupL = new SpeedControllerGroup(motorLF, motorLR  );
        addChild("contGroupL",contGroupL);
        
        
        diffDrive = new DifferentialDrive(contGroupL, contGroupR);
        addChild("diffDrive",diffDrive);
        diffDrive.setSafetyEnabled(true);
        diffDrive.setExpiration(0.1);
        diffDrive.setMaxOutput(1.0);

        
        limitSwitch = new DigitalInput(9);
        addChild("LimitSwitch",limitSwitch);
        
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop
     
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    
    //Basic Differential Drive command
    public void diffDrive() {
        //Robot.driveTrain.diffDrive.arcadeDrive(Robot.oi.driveTrainJoystick.getRawAxis(1), Robot.oi.driveTrainJoystick.getRawAxis(4));
        if(limitSwitchValue() == true) {
            motorRF.set(0);
        } else{
            motorRF.set(0.5);
        }
    }
 
    //Runs all the motors at half speed
    public void runMotor() {
        motorLF.set(0.5);
        motorLR.set(0.5);
        motorRF.set(0.5);
        motorRR.set(0.5);
    }
    //Returns the position of the encoder
    public double encoderPosition() {
        return motorRF.getSelectedSensorPosition(0);
    }
    //Sets the encoder value to 0
    public void zeroEncoder() {
        motorRF.setSelectedSensorPosition(0, kPIDLoopIdx, 0);
    }
    //Returns limit switch value
    public boolean limitSwitchValue() {
        return limitSwitch.get();
    }
}


