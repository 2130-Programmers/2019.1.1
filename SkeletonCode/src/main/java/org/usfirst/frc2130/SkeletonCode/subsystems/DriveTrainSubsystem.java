// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2130.SkeletonCode.subsystems;


import org.usfirst.frc2130.SkeletonCode.Robot;
import org.usfirst.frc2130.SkeletonCode.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.networktables.NetworkTable;
import edu.wpi.first.networktables.NetworkTableEntry;
import edu.wpi.first.networktables.NetworkTableInstance;
import edu.wpi.first.wpilibj.PIDOutput;
import edu.wpi.first.wpilibj.PIDSource;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;
import com.ctre.phoenix.motorcontrol.can.WPI_VictorSPX;
import edu.wpi.first.wpilibj.SpeedControllerGroup;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class DriveTrainSubsystem extends Subsystem {

    public double errorPrevious = 0;
    public double limelightX;
    public double limelightY;
    public double limelightArea;
    public NetworkTable table;
    public NetworkTableEntry tx;
    public NetworkTableEntry ty;
    public NetworkTableEntry ta;
    public boolean correctAngle = false;
    public double movingOutput;

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private WPI_TalonSRX leftRearMotor;
    private WPI_VictorSPX leftFrontMotor;
    private SpeedControllerGroup leftMotors;
    private WPI_TalonSRX rightRearMotor;
    private WPI_VictorSPX rightFrontMotor;
    private SpeedControllerGroup rightMotors;
    private DifferentialDrive differentialDrive;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public DriveTrainSubsystem() {

        table = NetworkTableInstance.getDefault().getTable("limelight");
        tx = table.getEntry("tx");
        ty = table.getEntry("ty");
        ta = table.getEntry("ta");

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        leftRearMotor = new WPI_TalonSRX(1);
        
        
        
        leftFrontMotor = new WPI_VictorSPX(3);
        
        
        
        leftMotors = new SpeedControllerGroup(leftRearMotor, leftFrontMotor  );
        addChild("LeftMotors",leftMotors);
        
        
        rightRearMotor = new WPI_TalonSRX(2);
        
        
        
        rightFrontMotor = new WPI_VictorSPX(4);
        
        
        
        rightMotors = new SpeedControllerGroup(rightRearMotor, rightFrontMotor  );
        addChild("RightMotors",rightMotors);
        
        
        differentialDrive = new DifferentialDrive(leftMotors, rightMotors);
        addChild("DifferentialDrive",differentialDrive);
        differentialDrive.setSafetyEnabled(true);
        differentialDrive.setExpiration(0.1);
        differentialDrive.setMaxOutput(1.0);

        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    leftFrontMotor.setInverted(true);
    rightFrontMotor.setInverted(true);
    leftRearMotor.setInverted(true);
    rightRearMotor.setInverted(true);

    
    }

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new DrivingConditionalCommand());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop

        limelightX = tx.getDouble(0.0);
        limelightY = ty.getDouble(0.0);
        limelightArea = ta.getDouble(0.0);  
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public double forwardUsingArea() {
        double k = 45;

        double output = k/Math.sqrt(limelightArea);
        double outputPercentage = output / 100;

        if(limelightArea == 0) {
            return 0;
        } else {
            if (output > 35) {
                return ((outputPercentage)*.8);
            } else { 
                return 0;
            }
        }
        
    }

    public double createOffset() {
        double x = limelightX;

        return x/2;
    }

    public double returnLX() {
        return limelightX;
    }

    public void stopAllMotors() {
        rightFrontMotor.set(0);
        rightRearMotor.set(0);
        leftFrontMotor.set(0);
        leftRearMotor.set(0);
    }

    public void driveToLimelight() {

        double offset = 0.2;

        switch (turnUsingOffset()){
            case 0:
                leftFrontMotor.set(forwardUsingArea());
                leftRearMotor.set(forwardUsingArea());
                rightFrontMotor.set(-(forwardUsingArea() - offset));
                rightRearMotor.set(-(forwardUsingArea() - offset));
            break;
            case 1:
                leftFrontMotor.set(forwardUsingArea() - offset);
                leftRearMotor.set(forwardUsingArea() - offset);
                rightFrontMotor.set(-forwardUsingArea());
                rightRearMotor.set(-forwardUsingArea());
            break;
            case 2:
                leftFrontMotor.set(forwardUsingArea());
                leftRearMotor.set(forwardUsingArea());
                rightFrontMotor.set(-forwardUsingArea());
                rightRearMotor.set(-forwardUsingArea());
            break;
            case 3:
                leftFrontMotor.set(0);
                leftRearMotor.set(0);
                rightFrontMotor.set(0);
                rightRearMotor.set(0);
            break;
        }

    }

    public void driveWithDifferential() {
        differentialDrive.arcadeDrive(Robot.oi.driverJoystick.getRawAxis(1) * -1, 
                                      Robot.oi.driverJoystick.getRawAxis(4) * .7);
    }

    public boolean downDPad() {
        int dPadAngle = Robot.oi.driverJoyPOV();

        if (dPadAngle == 180) {
            return true;
        } else {
            return false;
        }


    }
}

